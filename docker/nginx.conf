events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Logging
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    # Upstream for API Gateway (primary load balancer)
    upstream api_gateway {
        least_conn;
        server api-gateway:8080 max_fails=3 fail_timeout=30s;
    }

    # Upstream for Restaurant Service (direct access for debugging)
    upstream restaurant_service {
        least_conn;
        server restaurant-service-1:8080 max_fails=3 fail_timeout=30s;
        server restaurant-service-2:8080 max_fails=3 fail_timeout=30s;
    }

    # Health check endpoint
    server {
        listen 80;
        server_name health.localhost;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Main server configuration
    server {
        listen 80 default_server;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Rate limiting
        limit_req zone=api burst=20 nodelay;

        # Main API routes (via API Gateway)
        location / {
            proxy_pass http://api_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;

            # Health check
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        # Direct access to restaurant service (for debugging)
        location /direct/restaurants/ {
            rewrite ^/direct/restaurants/(.*)$ /api/restaurants/$1 break;
            proxy_pass http://restaurant_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Metrics endpoint for monitoring
        location /nginx_status {
            access_log off;
            allow 172.20.0.0/16;  # Only allow from docker network
            deny all;
            stub_status;
        }

        # Error pages
        error_page 404 /404.html;
        location = /404.html {
            return 404 '{"error":"Not Found","status":404,"path":"$request_uri"}';
            add_header Content-Type application/json;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            return 500 '{"error":"Internal Server Error","status":500,"message":"Service temporarily unavailable"}';
            add_header Content-Type application/json;
        }
    }
}